name: Rust CI and Release

on:
  push:
    branches: [ "master" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: me_chat_server-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: me_chat_server-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: me_chat_server-macos-x86_64

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        target: ${{ matrix.target }}

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: |
        cargo build --release

    - name: List files (Windows)
      if: matrix.os == 'windows-latest'
      run: dir target\release\

    - name: List files (Unix)
      if: matrix.os != 'windows-latest'
      run: ls -la target/release/

    - name: Copy and rename binaries (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy target\release\me_chat_server.exe target\release\me_chat_server-windows-x86_64.exe
        dir target\release\

    - name: Copy and rename binaries (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          cp target/release/me_chat_server target/release/me_chat_server-linux-x86_64
        else
          cp target/release/me_chat_server target/release/me_chat_server-macos-x86_64
        fi
        ls -la target/release/

    - name: Run tests
      run: cargo test --verbose

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/') && success()
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          target/release/${{ matrix.binary }}
        draft: false
        prerelease: false
        generate_release_notes: true

    - name: Deploy to Server
      if: matrix.os == 'ubuntu-latest' && success()
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 222
        source: "target/release/me_chat_server-linux-x86_64"
        target: "/vol1/1000/project/chat/"
        strip_components: 0

    - name: Build and Run Docker
      if: matrix.os == 'ubuntu-latest' && success()
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 222
        script: |
          cd /vol1/1000/project/chat/
          cat > Dockerfile << 'EOF'
          FROM ubuntu:jammy
          WORKDIR /app
          COPY me_chat_server-linux-x86_64 /app/me_chat_server
          RUN chmod +x /app/me_chat_server
          EXPOSE 8080
          CMD ["/app/me_chat_server"]
          EOF
          
          # 停止并删除旧容器
          docker stop me_chat_server || true
          docker rm me_chat_server || true
          
          # 构建新镜像
          docker build -t me_chat_server .
          
          # 运行新容器
          docker run -d \
            --name me_chat_server \
            -p 32000:8080 \
            -v /vol1/1000/project/chat/data:/app/data \
            me_chat_server
